{
  "architectureType": "data_flow_architecture",
  "version": "3.1.0",
  "lastUpdated": "2025-01-27",
  "relatedWorkflow": "12_Frontend_Development.md",
  
  "dataFlowPattern": {
    "architecture": "Flux/Redux",
    "unidirectional": true,
    "predictable": true,
    "debuggable": true,
    "testable": true
  },

  "stateManagement": {
    "library": "Redux Toolkit",
    "version": "1.9.0",
    "middleware": [
      "redux-thunk",
      "redux-logger",
      "redux-persist"
    ],
    "devTools": {
      "enabled": true,
      "trace": true,
      "traceLimit": 25
    }
  },

  "storeStructure": {
    "auth": {
      "description": "Authentication and user session state",
      "initialState": {
        "user": null,
        "token": null,
        "isAuthenticated": false,
        "loading": false,
        "error": null
      },
      "actions": [
        "login",
        "logout",
        "refreshToken",
        "updateProfile",
        "resetPassword"
      ]
    },
    "projects": {
      "description": "Project management state",
      "initialState": {
        "items": [],
        "currentProject": null,
        "loading": false,
        "error": null,
        "filters": {},
        "pagination": {
          "page": 1,
          "limit": 10,
          "total": 0
        }
      },
      "actions": [
        "fetchProjects",
        "createProject",
        "updateProject",
        "deleteProject",
        "setCurrentProject",
        "setFilters"
      ]
    },
    "ui": {
      "description": "UI state and preferences",
      "initialState": {
        "theme": "light",
        "sidebarCollapsed": false,
        "notifications": [],
        "modals": {},
        "loading": {},
        "errors": {}
      },
      "actions": [
        "setTheme",
        "toggleSidebar",
        "showNotification",
        "hideNotification",
        "openModal",
        "closeModal",
        "setLoading",
        "setError"
      ]
    },
    "analytics": {
      "description": "Analytics and metrics state",
      "initialState": {
        "dashboardData": null,
        "reports": [],
        "insights": [],
        "loading": false,
        "error": null,
        "dateRange": {
          "start": null,
          "end": null
        }
      },
      "actions": [
        "fetchDashboardData",
        "fetchReports",
        "generateReport",
        "setDateRange",
        "exportData"
      ]
    }
  },

  "actionTypes": {
    "naming": "FEATURE/ACTION_TYPE",
    "async": {
      "pending": "FEATURE/ACTION_PENDING",
      "fulfilled": "FEATURE/ACTION_FULFILLED",
      "rejected": "FEATURE/ACTION_REJECTED"
    },
    "examples": [
      "AUTH/LOGIN_PENDING",
      "AUTH/LOGIN_FULFILLED",
      "AUTH/LOGIN_REJECTED",
      "PROJECTS/FETCH_PROJECTS_PENDING",
      "UI/SET_THEME",
      "UI/TOGGLE_SIDEBAR"
    ]
  },

  "asyncDataFlow": {
    "pattern": "createAsyncThunk",
    "errorHandling": "global + local",
    "loading": "per-action",
    "caching": "RTK Query",
    "optimisticUpdates": "selective",
    "retryLogic": "exponential backoff"
  },

  "apiIntegration": {
    "client": "RTK Query",
    "baseUrl": "process.env.REACT_APP_API_URL",
    "authentication": "Bearer token",
    "interceptors": {
      "request": [
        "addAuthToken",
        "addRequestId",
        "logRequest"
      ],
      "response": [
        "handleErrors",
        "refreshToken",
        "logResponse"
      ]
    },
    "endpoints": {
      "auth": {
        "login": "POST /auth/login",
        "logout": "POST /auth/logout",
        "refresh": "POST /auth/refresh",
        "profile": "GET /auth/profile"
      },
      "projects": {
        "list": "GET /projects",
        "create": "POST /projects",
        "get": "GET /projects/:id",
        "update": "PUT /projects/:id",
        "delete": "DELETE /projects/:id"
      },
      "analytics": {
        "dashboard": "GET /analytics/dashboard",
        "reports": "GET /analytics/reports",
        "export": "POST /analytics/export"
      }
    }
  },

  "dataTransformation": {
    "normalization": {
      "enabled": true,
      "library": "@reduxjs/toolkit/query",
      "strategy": "entity adapter",
      "benefits": [
        "avoid duplication",
        "efficient updates",
        "consistent structure"
      ]
    },
    "selectors": {
      "library": "reselect",
      "memoization": true,
      "composition": true,
      "examples": [
        "selectCurrentUser",
        "selectProjectsByStatus",
        "selectFilteredProjects",
        "selectProjectStats"
      ]
    },
    "derived": {
      "computed": "selectors",
      "cached": "memoization",
      "dependencies": "input selectors"
    }
  },

  "componentDataFlow": {
    "connection": "useSelector + useDispatch",
    "hooks": [
      "useSelector",
      "useDispatch",
      "useStore"
    ],
    "customHooks": [
      "useAuth",
      "useProjects",
      "useApi",
      "useLocalStorage"
    ],
    "patterns": {
      "container": "connect to store",
      "presentation": "receive props",
      "smart": "manage local state",
      "dumb": "pure components"
    }
  },

  "realTimeDataFlow": {
    "websockets": {
      "enabled": true,
      "library": "socket.io-client",
      "events": [
        "project_updated",
        "user_joined",
        "notification_received"
      ],
      "middleware": "websocket middleware"
    },
    "serverSentEvents": {
      "enabled": false,
      "fallback": "polling"
    },
    "polling": {
      "enabled": true,
      "interval": 30000,
      "endpoints": [
        "notifications",
        "project_status"
      ]
    }
  },

  "caching": {
    "strategy": "multi-layer",
    "layers": {
      "memory": {
        "type": "Redux store",
        "duration": "session",
        "size": "unlimited"
      },
      "localStorage": {
        "type": "redux-persist",
        "duration": "persistent",
        "keys": ["auth", "ui.theme", "ui.preferences"]
      },
      "sessionStorage": {
        "type": "session cache",
        "duration": "session",
        "keys": ["ui.modals", "ui.notifications"]
      },
      "http": {
        "type": "RTK Query",
        "duration": "configurable",
        "invalidation": "tag-based"
      }
    },
    "invalidation": {
      "manual": "dispatch invalidation actions",
      "automatic": "time-based expiry",
      "conditional": "data dependency changes"
    }
  },

  "errorHandling": {
    "global": {
      "middleware": "error handling middleware",
      "fallback": "error boundary",
      "logging": "error tracking service"
    },
    "local": {
      "component": "error state in component",
      "user": "user-friendly messages",
      "retry": "retry mechanisms"
    },
    "network": {
      "offline": "offline detection",
      "timeout": "request timeout handling",
      "retry": "exponential backoff"
    }
  },

  "dataValidation": {
    "client": {
      "library": "yup",
      "forms": "react-hook-form integration",
      "api": "response validation"
    },
    "runtime": {
      "propTypes": "development warnings",
      "typescript": "compile-time checking"
    },
    "sanitization": {
      "input": "DOMPurify",
      "output": "escape HTML"
    }
  },

  "performance": {
    "optimization": {
      "memoization": "React.memo, useMemo, useCallback",
      "virtualization": "react-window for large lists",
      "pagination": "server-side pagination",
      "debouncing": "search and filters"
    },
    "bundleSplitting": {
      "routes": "lazy loading",
      "components": "dynamic imports",
      "vendors": "separate chunks"
    },
    "monitoring": {
      "renderTime": "React DevTools Profiler",
      "stateSize": "Redux DevTools",
      "memoryUsage": "browser dev tools"
    }
  },

  "testing": {
    "unit": {
      "reducers": "pure function testing",
      "actions": "action creator testing",
      "selectors": "selector testing",
      "components": "connected component testing"
    },
    "integration": {
      "dataFlow": "end-to-end data flow testing",
      "api": "API integration testing",
      "realTime": "WebSocket testing"
    },
    "mocking": {
      "store": "mock store for testing",
      "api": "MSW for API mocking",
      "websockets": "mock WebSocket server"
    }
  },

  "debugging": {
    "tools": [
      "Redux DevTools",
      "React DevTools",
      "Network tab",
      "Console logging"
    ],
    "techniques": {
      "timeTravel": "Redux DevTools time travel",
      "stateInspection": "state tree inspection",
      "actionLogging": "action dispatch logging",
      "performance": "performance profiling"
    }
  },

  "security": {
    "dataProtection": {
      "sensitive": "never store in Redux",
      "encryption": "encrypt before storage",
      "sanitization": "sanitize user input"
    },
    "authentication": {
      "tokens": "secure token storage",
      "refresh": "automatic token refresh",
      "logout": "clear all state on logout"
    },
    "authorization": {
      "rbac": "role-based access control",
      "permissions": "permission checking",
      "routes": "protected routes"
    }
  },

  "dataFlowDiagram": {
    "components": [
      "UI Components",
      "Action Creators",
      "Middleware",
      "Reducers",
      "Store",
      "Selectors",
      "API Layer"
    ],
    "flow": [
      "User Interaction → Action Creator",
      "Action Creator → Middleware",
      "Middleware → API (if async)",
      "API Response → Action",
      "Action → Reducer",
      "Reducer → Store Update",
      "Store Update → Component Re-render",
      "Component → Selector → Derived Data"
    ]
  },

  "bestPractices": {
    "actions": [
      "Use action creators",
      "Keep actions simple",
      "Use consistent naming",
      "Include error handling"
    ],
    "reducers": [
      "Keep reducers pure",
      "Use immutable updates",
      "Handle all action types",
      "Use Redux Toolkit"
    ],
    "selectors": [
      "Use memoized selectors",
      "Keep selectors simple",
      "Compose complex selectors",
      "Test selectors independently"
    ],
    "components": [
      "Connect at container level",
      "Use custom hooks",
      "Minimize connected components",
      "Handle loading states"
    ]
  },

  "migration": {
    "fromLegacy": {
      "strategy": "incremental migration",
      "steps": [
        "Install Redux Toolkit",
        "Migrate store configuration",
        "Convert action creators",
        "Update reducers",
        "Migrate selectors",
        "Update components"
      ]
    },
    "compatibility": {
      "redux": "compatible with existing Redux",
      "middleware": "works with existing middleware",
      "devtools": "enhanced DevTools support"
    }
  },

  "documentation": {
    "architecture": {
      "diagrams": "data flow diagrams",
      "patterns": "documented patterns",
      "examples": "code examples"
    },
    "api": {
      "actions": "action documentation",
      "reducers": "reducer documentation",
      "selectors": "selector documentation"
    },
    "guides": {
      "setup": "setup guide",
      "patterns": "pattern guide",
      "troubleshooting": "common issues"
    }
  }
} 