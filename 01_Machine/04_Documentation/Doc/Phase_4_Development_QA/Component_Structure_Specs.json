{
  "specType": "component_structure",
  "version": "3.1.0",
  "lastUpdated": "2025-01-27",
  "relatedWorkflow": "12_Frontend_Development.md",
  
  "componentHierarchy": {
    "atomic": {
      "level": 1,
      "description": "Basic building blocks that cannot be broken down further",
      "examples": ["Button", "Input", "Label", "Icon", "Avatar"],
      "characteristics": [
        "Single responsibility",
        "No internal state management",
        "Highly reusable",
        "Minimal props interface"
      ]
    },
    "molecular": {
      "level": 2,
      "description": "Simple groups of UI elements functioning together",
      "examples": ["SearchBox", "FormField", "Card", "Dropdown", "Tooltip"],
      "characteristics": [
        "Composed of atomic components",
        "Limited internal state",
        "Specific functionality",
        "Moderate reusability"
      ]
    },
    "organism": {
      "level": 3,
      "description": "Complex UI components with distinct sections",
      "examples": ["Header", "Sidebar", "DataTable", "Form", "Modal"],
      "characteristics": [
        "Composed of molecules and atoms",
        "Complex state management",
        "Business logic integration",
        "Context-specific"
      ]
    },
    "template": {
      "level": 4,
      "description": "Page-level objects that place components into layout",
      "examples": ["PageLayout", "DashboardTemplate", "AuthTemplate"],
      "characteristics": [
        "Layout structure",
        "Component positioning",
        "Responsive behavior",
        "No business logic"
      ]
    },
    "page": {
      "level": 5,
      "description": "Specific instances of templates with real content",
      "examples": ["HomePage", "LoginPage", "DashboardPage", "ProfilePage"],
      "characteristics": [
        "Template implementation",
        "Data integration",
        "Route handling",
        "Business logic"
      ]
    }
  },
  
  "componentStructure": {
    "fileNaming": {
      "convention": "PascalCase",
      "pattern": "ComponentName.jsx",
      "testFile": "ComponentName.test.jsx",
      "storyFile": "ComponentName.stories.jsx",
      "styleFile": "ComponentName.module.scss"
    },
    "directoryStructure": {
      "pattern": "src/components/[category]/[ComponentName]/",
      "files": [
        "index.js",
        "ComponentName.jsx",
        "ComponentName.test.jsx",
        "ComponentName.stories.jsx",
        "ComponentName.module.scss",
        "README.md"
      ]
    },
    "categories": {
      "ui": "Basic UI components (atoms, molecules)",
      "layout": "Layout and structural components",
      "forms": "Form-related components",
      "navigation": "Navigation components",
      "feedback": "User feedback components",
      "data": "Data display components",
      "media": "Media and content components"
    }
  },
  
  "componentInterface": {
    "propsDefinition": {
      "required": {
        "type": "PropTypes.object.isRequired",
        "description": "Props that must be provided"
      },
      "optional": {
        "type": "PropTypes.object",
        "description": "Props with default values"
      },
      "children": {
        "type": "PropTypes.node",
        "description": "Child components or content"
      },
      "className": {
        "type": "PropTypes.string",
        "description": "Additional CSS classes"
      },
      "testId": {
        "type": "PropTypes.string",
        "description": "Test identifier for testing"
      }
    },
    "defaultProps": {
      "required": true,
      "pattern": "ComponentName.defaultProps = { ... }"
    },
    "propTypes": {
      "required": true,
      "pattern": "ComponentName.propTypes = { ... }"
    }
  },
  
  "stateManagement": {
    "localState": {
      "hook": "useState",
      "usage": "Component-specific state",
      "examples": ["form input values", "toggle states", "loading states"]
    },
    "effectHooks": {
      "hook": "useEffect",
      "usage": "Side effects and lifecycle",
      "examples": ["API calls", "event listeners", "cleanup"]
    },
    "contextState": {
      "hook": "useContext",
      "usage": "Shared state across components",
      "examples": ["theme", "user authentication", "language"]
    },
    "globalState": {
      "hook": "useSelector/useDispatch",
      "usage": "Application-wide state",
      "examples": ["user data", "application settings", "cached data"]
    }
  },
  
  "stylingApproach": {
    "methodology": "CSS Modules + Tailwind CSS",
    "structure": {
      "cssModules": {
        "enabled": true,
        "naming": "camelCase",
        "scope": "local"
      },
      "tailwindCSS": {
        "enabled": true,
        "usage": "utility-first",
        "customization": true
      },
      "scssSupport": {
        "enabled": true,
        "features": ["variables", "mixins", "nesting"]
      }
    },
    "conventions": {
      "classNaming": "BEM methodology",
      "responsive": "mobile-first approach",
      "theming": "CSS custom properties"
    }
  },
  
  "accessibilityStandards": {
    "requirements": {
      "wcagLevel": "AA",
      "ariaLabels": "required for interactive elements",
      "keyboardNavigation": "full support",
      "screenReader": "compatible",
      "colorContrast": "minimum 4.5:1 ratio"
    },
    "implementation": {
      "semanticHTML": "use appropriate HTML elements",
      "ariaAttributes": "implement ARIA where needed",
      "focusManagement": "logical tab order",
      "alternativeText": "for images and media"
    }
  },
  
  "testingStrategy": {
    "unitTests": {
      "framework": "Jest + React Testing Library",
      "coverage": "minimum 80%",
      "focus": ["rendering", "user interactions", "prop handling"]
    },
    "integrationTests": {
      "framework": "Jest + React Testing Library",
      "focus": ["component interactions", "state changes", "API integration"]
    },
    "visualTests": {
      "framework": "Storybook + Chromatic",
      "focus": ["visual regression", "responsive design", "theme variations"]
    }
  },
  
  "performanceOptimization": {
    "memoization": {
      "React.memo": "for pure components",
      "useMemo": "for expensive calculations",
      "useCallback": "for function references"
    },
    "lazyLoading": {
      "React.lazy": "for code splitting",
      "Suspense": "for loading states",
      "dynamic imports": "for large components"
    },
    "bundleOptimization": {
      "treeShaking": "remove unused code",
      "codesplitting": "split by routes/features",
      "assetOptimization": "compress images and fonts"
    }
  },
  
  "documentationStandards": {
    "componentDocumentation": {
      "required": ["README.md", "PropTypes", "JSDoc comments"],
      "storybook": "interactive documentation",
      "examples": "usage examples and variations"
    },
    "codeComments": {
      "jsDoc": "function and component documentation",
      "inline": "complex logic explanation",
      "todo": "future improvements and known issues"
    }
  },
  
  "errorHandling": {
    "errorBoundaries": {
      "implementation": "wrap components prone to errors",
      "fallback": "user-friendly error messages",
      "logging": "error reporting to monitoring service"
    },
    "propValidation": {
      "propTypes": "runtime prop validation",
      "typescript": "compile-time type checking",
      "defaultProps": "fallback values"
    }
  },
  
  "componentLifecycle": {
    "creation": {
      "steps": ["design", "implementation", "testing", "documentation", "review"],
      "checklist": ["accessibility", "performance", "reusability", "maintainability"]
    },
    "maintenance": {
      "versioning": "semantic versioning",
      "deprecation": "gradual phase-out process",
      "updates": "backward compatibility consideration"
    }
  },
  
  "qualityGates": {
    "codeReview": {
      "required": true,
      "checklist": ["functionality", "performance", "accessibility", "maintainability"]
    },
    "testing": {
      "unitTests": "pass all tests",
      "coverage": "minimum 80%",
      "visualTests": "no regression"
    },
    "performance": {
      "bundleSize": "within limits",
      "renderTime": "under 16ms",
      "memoryUsage": "no leaks"
    }
  }
} 